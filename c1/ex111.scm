(define (f-rec n)
    (cond ((< n 3) n)
          (else (+ (f-rec (- n 1))
                   (* 2 (f-rec (- n 2)))
                   (* 3 (f-rec (- n 3)))))))

(f-rec 0)
(f-rec 1)
(f-rec 2)
(f-rec 3)
(f-rec 4)
(f-rec 5)
(f-rec 6)


(define (f-ite n) (fi 0 1 2 n))
(define (fi n0 n1 n2 n)
    (cond ((= 0 n) n0)
          ((= 1 n) n1)  
          ((= 2 n) n2)
          (else (fi n1 n2 (+ (* 3 n0) (* 2 n1) n2) 
                          (- n 1)))))

(f-ite 0)
(f-ite 1)
(f-ite 2)
(f-ite 3)
(f-ite 4)
(f-ite 5)
(f-ite 6)